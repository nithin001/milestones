{"version":3,"sources":["Form.jsx","Result.jsx","App.jsx","serviceWorker.js","index.js"],"names":["units","Form","props","classes","milestones","updateMilestones","generateMilestones","selectedDate","handleDateChange","_useState","useState","_useState2","Object","slicedToArray","count","setCount","_useState3","_useState4","unit","setUnit","react_default","a","createElement","Grid_default","className","root","container","alignItems","form","section","Typography_default","gutterBottom","variant","material_ui_pickers_esm","value","onChange","autoOk","Divider_default","map","milestone","Chip_default","key","concat","label","chip","onDelete","updatedMilestones","filter","ms","FormControl_default","formControl","InputLabel_default","htmlFor","Input_default","id","event","target","Select_default","inputProps","name","ut","MenuItem_default","Button_default","onClick","toConsumableArray","push","color","size","fullWidth","defaultProps","withStyles","theme","display","justifyContent","marginTop","spacing","width","maxWidth","backgroundColor","palette","background","paper","margin","processDate","dateFn","addDays","addMonths","addYears","addToCalendar","text","date","message","format","nextDay","formattedDate","url","window","open","result","row","&:nth-of-type(odd)","default","section3","reset","setText","Table_default","table","TableHead_default","TableRow_default","TableCell_default","TableBody_default","component","scope","createMuiTheme","type","typography","useNextVariants","defaultMilestones","App","resultMode","setResultMode","_useState5","Date","_useState6","src_Form","src_Result","styles","utils","DateFnsUtils","CssBaseline_default","AppBar_default","position","Toolbar_default","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.357aba04.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { DatePicker } from 'material-ui-pickers';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: theme.spacing.unit * 3,\n  },\n  form: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  chip: {\n    margin: theme.spacing.unit,\n  },\n  section: {\n    margin: `${theme.spacing.unit * 3}px ${theme.spacing.unit * 2}px`,\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nconst units = ['days', 'months', 'years'];\n\nfunction Form(props) {\n  const {\n    classes, milestones, updateMilestones, generateMilestones, selectedDate, handleDateChange,\n  } = props;\n\n  const [count, setCount] = useState(1);\n  const [unit, setUnit] = useState(units[0]);\n\n  const addToMilestone = () => {\n    const updatedMilestones = [...milestones];\n    updatedMilestones.push({ count, unit });\n    updateMilestones(updatedMilestones);\n    setCount(1);\n    setUnit(units[0]);\n  };\n\n  return (\n    <Grid className={classes.root} container alignItems=\"center\">\n      <div className={classes.form}>\n        <div className={classes.section}>\n          <Typography gutterBottom variant=\"h4\">\n            Initial Date\n          </Typography>\n          <DatePicker\n            value={selectedDate}\n            onChange={handleDateChange}\n            autoOk\n          />\n        </div>\n        <Divider variant=\"middle\" />\n        <div className={classes.section}>\n          <Typography gutterBottom variant=\"h4\">\n            Milestones\n          </Typography>\n          <div>\n            {milestones.map((milestone) => {\n              const deleteMilestone = () => {\n                const updatedMilestones = milestones.filter(ms => ms.count !== milestone.count\n                  || ms.unit !== milestone.unit);\n                updateMilestones(updatedMilestones);\n              };\n              return (\n                <Chip\n                  key={`${milestone.count}${milestone.unit}`}\n                  label={`${milestone.count} ${milestone.unit}`}\n                  className={classes.chip}\n                  onDelete={deleteMilestone}\n                />\n              );\n            })}\n          </div>\n        </div>\n        <Divider variant=\"middle\" />\n        <div className={classes.section}>\n          <Typography gutterBottom variant=\"h4\">\n            Add milestone\n          </Typography>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"component-simple\">Count</InputLabel>\n            <Input id=\"component-simple\" value={count} onChange={(event) => { setCount(event.target.value); }} />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"unit-simple\">Unit</InputLabel>\n            <Select\n              value={unit}\n              onChange={(event) => { setUnit(event.target.value); }}\n              inputProps={{\n                name: 'unit',\n                id: 'unit-simple',\n              }}\n            >\n              {units.map(ut => <MenuItem key={ut} value={ut}>{ut}</MenuItem>)}\n            </Select>\n          </FormControl>\n          <br />\n          <FormControl className={classes.formControl}>\n            <Button onClick={addToMilestone} variant=\"contained\" color=\"secondary\" size=\"small\">\n             Add\n            </Button>\n          </FormControl>\n        </div>\n        <div className={classes.section}>\n          <Button onClick={generateMilestones} variant=\"contained\" color=\"primary\" fullWidth>\n           Generate Milestones\n          </Button>\n        </div>\n      </div>\n    </Grid>\n  );\n}\n\nForm.propTypes = {\n  classes: PropTypes.object.isRequired,\n  milestones: PropTypes.arrayOf(PropTypes.shape(\n    {\n      count: PropTypes.number,\n      unit: PropTypes.string,\n    },\n  )),\n  updateMilestones: PropTypes.func.isRequired,\n  generateMilestones: PropTypes.func.isRequired,\n  selectedDate: PropTypes.instanceOf(Date).isRequired,\n  handleDateChange: PropTypes.func.isRequired,\n};\n\nForm.defaultProps = {\n  milestones: [],\n};\nexport default withStyles(styles)(Form);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  addDays, addMonths, addYears, format,\n} from 'date-fns';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: theme.spacing.unit * 3,\n  },\n  result: {\n    width: '100%',\n    maxWidth: 520,\n    backgroundColor: theme.palette.background.paper,\n  },\n  row: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default,\n    },\n  },\n  section3: {\n    margin: `${theme.spacing.unit * 6}px ${theme.spacing.unit * 2}px ${theme.spacing.unit * 2}px`,\n  },\n});\n\nconst processDate = (selectedDate, milestone) => {\n  let dateFn = addDays;\n  if (milestone.unit === 'months') {\n    dateFn = addMonths;\n  } else if (milestone.unit === 'years') {\n    dateFn = addYears;\n  }\n  return dateFn(selectedDate, milestone.count);\n};\n\nconst addToCalendar = (text, date, selectedDate, milestone) => {\n  const root = 'https://calendar.google.com/calendar/r/eventedit?';\n  const message = `${milestone.count} ${milestone.unit} since ${format(selectedDate, 'dd/MM/yyyy')}`;\n  const nextDay = addDays(date, 1);\n  const formattedDate = `${format(date, 'yyyyMMdd')}/${format(nextDay, 'yyyyMMdd')}`;\n  const url = `${root}text=${text}&dates=${formattedDate}&details=${message}&sf=true&output=xml`;\n  window.open(url, '_blank', 'false');\n};\n\nfunction Result(props) {\n  const {\n    classes, milestones, reset, selectedDate,\n  } = props;\n  const [text, setText] = useState('');\n  return (\n    <Grid className={classes.root} container alignItems=\"center\">\n      <div className={classes.result}>\n        <div className={classes.section3}>\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"component-simple\">What is the event?</InputLabel>\n            <Input id=\"component-simple\" value={text} onChange={(event) => { setText(event.target.value); }} />\n          </FormControl>\n        </div>\n        <Divider variant=\"middle\" />\n        <div className={classes.section3}>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Milestone</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Action</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {milestones.map((milestone) => {\n                const id = `${milestone.count}${milestone.unit}`;\n                const date = processDate(selectedDate, milestone);\n                return (\n                  <TableRow className={classes.row} key={id}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {milestone.count}\n                      {' '}\n                      {milestone.unit}\n                    </TableCell>\n                    <TableCell>{format(date, 'dd/MM/yyyy')}</TableCell>\n                    <TableCell>\n                      <Button\n                        onClick={() => { addToCalendar(text, date, selectedDate, milestone); }}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        size=\"small\"\n                      >\n                        Add to calendar\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n        <div className={classes.section3}>\n          <Button onClick={reset} variant=\"contained\" color=\"primary\" fullWidth>\n           Reset\n          </Button>\n        </div>\n      </div>\n    </Grid>\n  );\n}\n\nResult.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Result);\n","import React, { useState } from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\n\n// pick utils\nimport DateFnsUtils from '@date-io/date-fns';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nconst defaultMilestones = [\n  { count: 100, unit: 'days' },\n  { count: 500, unit: 'days' },\n  { count: 1000, unit: 'days' },\n  { count: 10000, unit: 'days' },\n];\n\nfunction App() {\n  const [milestones, updateMilestones] = useState(defaultMilestones);\n  const [resultMode, setResultMode] = useState(false);\n  const [selectedDate, handleDateChange] = useState(new Date());\n\n  const generateMilestones = () => {\n    setResultMode(true);\n  };\n  const reset = () => { setResultMode(false); };\n  const form = (\n    <Form\n      milestones={milestones}\n      updateMilestones={updateMilestones}\n      generateMilestones={generateMilestones}\n      selectedDate={selectedDate}\n      handleDateChange={handleDateChange}\n    />\n  );\n  const result = <Result milestones={milestones} reset={reset} selectedDate={selectedDate} />;\n  return (\n    <MuiThemeProvider theme={theme}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <CssBaseline />\n        <AppBar color=\"secondary\" position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n                Milestones\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {resultMode ? result : form }\n      </MuiPickersUtilsProvider>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}